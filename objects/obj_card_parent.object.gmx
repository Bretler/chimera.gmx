<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the card

/**************************
Initialize variables
**************************/

// csv &amp; surface
card_number = 3; // card row in csv array
surface = noone; // surface
spr_custom_card = 0; // sprite_var that surface is drawn onto

// selection
selected = false; // is card selected?

// doubleclick
clicks = 0; // (used in alarm event)

// card state
sapped = false; // (used in left pressed)

// attk / def (this code is found here for when the card is spawned, then in the scr_card init for when it's assigned a card_number)
card_attk_starting = real(global.my_csv[card_number, 5]); // store for safe keeping
card_def_starting = real(global.my_csv[card_number, 6]); // store for safe keeping
card_attk = card_attk_starting // adjustable values
card_def = card_def_starting // adjustable values

/**************************
Create card sprite
**************************/

scr_surface_to_sprite();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Double-click alarm (used in left pressed)

clicks = 0; //resets clicks
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Should this card be destroyed?

if (card_def &lt;= 0) {
    audio_play_sound(snd_squish, 10, false);
    instance_destroy();
    sprite_delete(spr_custom_card);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the card

/**************************
Move card code
**************************/

// move card with the mouse while maintaining click position relative to card
if (selected) {
    x = mouse_x - xpart; // keeps the card the same distance from the mouse when clicked
    y = mouse_y - ypart; // keeps the card the same distance from the mouse when clicked
}

// resets the double-click while moving the card 
    if (x != xprevious || y != yprevious) clicks = 0; // if the card moved, reset double-click

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Release selection variables

selected = false; // this card can now be selected
global.can_select = true; // selection of cards is allowed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Floating modifiers, and returning card to deck

/**************************
Floating Modifiers
**************************/

// apply floating def amount to card def
if (global.floating_def == true){
    card_def +=  global.floating_def_amount;
    global.floating_def_amount = 0;
    global.floating_def = false;
    scr_surface_to_sprite();
}

// apply floating attk amount to card attk
if (global.floating_attk == true) { 
    card_attk += global.floating_attk_amount;
    global.floating_attk_amount = 0;
    global.floating_attk = false;
    scr_surface_to_sprite();
}

/**************************
Return card to the deck
**************************/

if (scr_lowest_depth(obj_deck) == noone) exit; // If there's no card above the obj_deck, we need not proceed.

// add released card to obj_deck's card_list
with (obj_deck){
  ds_list_add(card_list, other.card_number);
  base_depth += 1;
}

instance_destroy(); // destroy the card object
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selection, double-click, and sap code

if (scr_lowest_depth(object_index) != id) exit; // only run for the instance that's the lowest depth

if (!global.floating_def and !global.floating_attk) { // if we're not floating a modifier -

    // selection code
    if (global.can_select){ // &amp; we're not currently selecting a card -
        selected = true; // "select" clicked card
        global.can_select = false; // don't allow selection of other cards
        xpart = mouse_x-x; // calculate distance between mouse, and card edge
        ypart = mouse_y-y; // calculate distance between mouse, and card top
    }
    
    
    // double-click &amp; sap code
    if (clicks == 0) {
        clicks = 1; // document click 1 of 2
        alarm[0] = 15; // time to perform a double click
    } else if (clicks == 1){
    
        // perform double click action
        sapped = not sapped; // turn true to false, and false to true
        scr_surface_to_sprite(); // redraw card
        clicks = 0; // resets clicks to 0
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
